<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ZHB&#39;s Blog</title>
    <link>https://blog.gkzhb.tk/post/</link>
    <description>Recent content in Posts on ZHB&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 08 Feb 2020 16:15:20 +0800</lastBuildDate>
    
	<atom:link href="https://blog.gkzhb.tk/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Towards an Optimal Subspace for K-Means</title>
      <link>https://blog.gkzhb.tk/post/sub-k-means/</link>
      <pubDate>Sat, 08 Feb 2020 16:15:20 +0800</pubDate>
      
      <guid>https://blog.gkzhb.tk/post/sub-k-means/</guid>
      <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;这篇论文提出了对 k-means 算法的一个降维的扩展。扩展的目标是在找到 k-menas 样式聚类分区的同时，将聚类转换到一个最优的子空间。子空间的维度是自动获取的，无需附加参数。而且这个子空间有助于我们了解高维空间的数据。&lt;/p&gt;
&lt;p&gt;降维操作的本质是对座标系进行刚体变换（平移和旋转）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用 Hugo 与 Markdown 制作网页 PPT</title>
      <link>https://blog.gkzhb.tk/post/revealjs/</link>
      <pubDate>Wed, 18 Dec 2019 18:33:44 +0800</pubDate>
      
      <guid>https://blog.gkzhb.tk/post/revealjs/</guid>
      <description>&lt;p&gt;很久以前就在知乎上看到可以用 &lt;a href=&#34;https://github.com/hakimel/reveal.js/&#34;&gt;reveal.js&lt;/a&gt; 在网页上制作 PPT。但是一直没有用过，直到最近课堂展示上看到有人用 HackMD 做网页端 Slides 才又有了兴致。HackMD 提供网页端服务，通过 Markdown 排版 Slides。看起来也是用的 reveal.js，可惜网络不(bei)好(qiang)，在公用电脑上不方便进行展示。于是我在网上寻找类似的功能，发现有 &lt;a href=&#34;https://github.com/dzello/reveal-hugo&#34;&gt;reveal.js 的 Hugo 主题&lt;/a&gt; 可以较好地实现。这里有一个该&lt;a href=&#34;https://themes.gohugo.io/theme/reveal-hugo&#34;&gt;Hugo 主题的 Demo&lt;/a&gt;和我自己的&lt;a href=&#34;https://gkzhb.gitee.io/slides&#34;&gt;简单的 Demo&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Training Big Random Forests with Little Resources</title>
      <link>https://blog.gkzhb.tk/post/big-random-forests/</link>
      <pubDate>Sat, 14 Dec 2019 10:01:00 +0800</pubDate>
      
      <guid>https://blog.gkzhb.tk/post/big-random-forests/</guid>
      <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;对大量数据实例使用随机森林一般需要大型计算集群来进行训练。这篇论文提出了一种简单有效的分层构造框架来提高训练的速度。其基本思路是一个多级构造方案：用数据的少量随机子集来构建顶层树，之后将所有训练实例通过顶层树分散到各个叶子节点后进行后续的处理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>150 Successful Machine Learning Models: 6 Lessons Learned at Booking.com</title>
      <link>https://blog.gkzhb.tk/post/booking-ml/</link>
      <pubDate>Sun, 10 Nov 2019 00:51:56 +0800</pubDate>
      
      <guid>https://blog.gkzhb.tk/post/booking-ml/</guid>
      <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;这篇论文介绍了在实际生产环境中机器学习如何发挥的重要作用。
给出的结论是：成功的基础是迭代与假设驱动的过程&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>第一篇 Hugo 文章</title>
      <link>https://blog.gkzhb.tk/post/my-post/</link>
      <pubDate>Fri, 08 Nov 2019 22:26:28 +0800</pubDate>
      
      <guid>https://blog.gkzhb.tk/post/my-post/</guid>
      <description>&lt;p&gt;测试 Hugo Markdown 语法样式&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Anki 自建同步服务器 ankisyncd</title>
      <link>https://blog.gkzhb.tk/post/ankisyncd/</link>
      <pubDate>Sun, 23 Jun 2019 11:25:09 +0800</pubDate>
      
      <guid>https://blog.gkzhb.tk/post/ankisyncd/</guid>
      <description>&lt;p&gt;Anki 是一个用于记忆的软件，客户端同时支持电脑端和移动端（除了 iOS 上 AnkiMobile 收费以外都是免费的）。如果要使用同步的功能，使用官方的 AnkiWeb 网速较慢，在同步大量的 media 文件的时候十分痛苦。GitHub 上有牛人实现了 Anki 同步的 API 接口，可以自建同步服务器：&lt;a href=&#34;https://github.com/dsnopek/anki-sync-server&#34;&gt;dsnopek/anki-sync-server&lt;/a&gt;。不过这个服务端已经很久没有维护过了，在电脑上最新的 Anki 已经无法正常同步了。于是我在 Google 上找到了一篇文章：&lt;a href=&#34;http://genedan.com/no-127-ankisyncd-a-custom-sync-server-for-anki-2-1/&#34;&gt;ankisyncd – A Custom Sync Server for Anki 2.1 | Gene Dan&amp;rsquo;s Blog&lt;/a&gt;。我按照博客里提供的 &lt;a href=&#34;https://github.com/tsudoko/anki-sync-server&#34;&gt;tsudoko/anki-sync-server&lt;/a&gt; 对应的文档，成功在自己的 VPS 上搭建了服务器，并且在 Ankidroid 上和 Linux 端 2.1.11 版本的 Anki 上成功同步数据。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iOS 上 AnkiMobile 不支持自定义同步服务器&lt;/li&gt;
&lt;li&gt;同步服务器没有 AnkiWeb 的网页端访问支持&lt;/li&gt;
&lt;li&gt;ankisyncd 服务器支持 PC 端 Anki 版本 2.1.1 - 2.1.11，但是 2.1.9 版本不支持&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>自建”稍后阅读“服务—— wallabag</title>
      <link>https://blog.gkzhb.tk/post/wallabag/</link>
      <pubDate>Wed, 03 Apr 2019 21:00:53 +0800</pubDate>
      
      <guid>https://blog.gkzhb.tk/post/wallabag/</guid>
      <description>&lt;p&gt;&amp;ldquo;稍后阅读&amp;quot;英文对应于 &lt;em&gt;Read-It-Later&lt;/em&gt; ，是指将碎片化信息中需要花时间仔细阅读思考或需要二次阅读消化的内容收集起来，待空余时间统一消化理解。国外这方面的知名应用服务商有 Pocket、 Instapaper 以及我之前一直使用的网速慢而且标签功能有 bug 的 Ioreader 等。由于国外服务商在国内网速较慢，而国内的也没找到附合心意的服务商，我选择自建服务 wallabag，运行在我的阿里云 VPS 上。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 ngrok 实现内网穿透（自建 ngrok 服务器）</title>
      <link>https://blog.gkzhb.tk/post/ngrok/</link>
      <pubDate>Sat, 16 Mar 2019 19:18:13 +0800</pubDate>
      
      <guid>https://blog.gkzhb.tk/post/ngrok/</guid>
      <description>&lt;p&gt;有时候我希望能直接通过互联网访问到层层路由下的个人电脑，但是在没有固定 IPv4 的情况下很难做到这一点。一个解决方法就是使用内网穿透技术，而我选择用 ngrok 来实现。ngrok 在 1.x 版本时是开源的，到了 2.x 版本就闭源了。因为自建 ngrok 服务器需要将自己生成的证书编译到客户端中，所以只能使用开源的 1.x 版本从源码编译生成。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>